// This file was automatically generated. Do not edit this file!
#ifndef INITIALIZER_EXOTICA_OMPL_CONTROL_SOLVER_CONTROL_RRT_SOLVER_INITIALIZER_H
#define INITIALIZER_EXOTICA_OMPL_CONTROL_SOLVER_CONTROL_RRT_SOLVER_INITIALIZER_H

#include <exotica_core/property.h>

namespace exotica
{
inline std::vector<Initializer> GetExoticaOmplControlSolverInitializers();
}

namespace exotica
{

class ControlRRTSolverInitializer : public InitializerBase
{
public:
    static std::string GetContainerName() {return "exotica/ControlRRTSolver" ;}

    ControlRRTSolverInitializer() : InitializerBase(),
        Debug( false) ,
        MaxIterations( 100) ,
        MaxIterationTime( 10.0) ,
        ConvergenceTolerance( 1e-3) ,
        Seed( -1) ,
        ApproximateSolution( true) 
    {
    }

    ControlRRTSolverInitializer( std::string _Name, Eigen::VectorXd _StateLimits, bool _Debug =  false, int _MaxIterations =  100, double _MaxIterationTime =  10.0, double _ConvergenceTolerance =  1e-3, int _Seed =  -1, bool _ApproximateSolution =  true) : InitializerBase(),
        Name(_Name) ,
        StateLimits(_StateLimits) ,
        Debug(_Debug) ,
        MaxIterations(_MaxIterations) ,
        MaxIterationTime(_MaxIterationTime) ,
        ConvergenceTolerance(_ConvergenceTolerance) ,
        Seed(_Seed) ,
        ApproximateSolution(_ApproximateSolution) 
    {
    }

    ControlRRTSolverInitializer(const Initializer& other) : ControlRRTSolverInitializer()
    {
        if (other.HasProperty("Name")) {const Property& prop=other.properties_.at("Name"); if(prop.IsSet()) Name = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("StateLimits")) {const Property& prop=other.properties_.at("StateLimits"); if(prop.IsSet()) StateLimits = prop.IsStringType()?ParseVector<double,Eigen::Dynamic>(boost::any_cast<std::string>(prop.Get())):boost::any_cast<Eigen::VectorXd>(prop.Get());}
        if (other.HasProperty("Debug")) {const Property& prop=other.properties_.at("Debug"); if(prop.IsSet()) Debug = prop.IsStringType()?ParseBool(boost::any_cast<std::string>(prop.Get())):boost::any_cast<bool>(prop.Get());}
        if (other.HasProperty("MaxIterations")) {const Property& prop=other.properties_.at("MaxIterations"); if(prop.IsSet()) MaxIterations = prop.IsStringType()?ParseInt(boost::any_cast<std::string>(prop.Get())):boost::any_cast<int>(prop.Get());}
        if (other.HasProperty("MaxIterationTime")) {const Property& prop=other.properties_.at("MaxIterationTime"); if(prop.IsSet()) MaxIterationTime = prop.IsStringType()?ParseDouble(boost::any_cast<std::string>(prop.Get())):boost::any_cast<double>(prop.Get());}
        if (other.HasProperty("ConvergenceTolerance")) {const Property& prop=other.properties_.at("ConvergenceTolerance"); if(prop.IsSet()) ConvergenceTolerance = prop.IsStringType()?ParseDouble(boost::any_cast<std::string>(prop.Get())):boost::any_cast<double>(prop.Get());}
        if (other.HasProperty("Seed")) {const Property& prop=other.properties_.at("Seed"); if(prop.IsSet()) Seed = prop.IsStringType()?ParseInt(boost::any_cast<std::string>(prop.Get())):boost::any_cast<int>(prop.Get());}
        if (other.HasProperty("ApproximateSolution")) {const Property& prop=other.properties_.at("ApproximateSolution"); if(prop.IsSet()) ApproximateSolution = prop.IsStringType()?ParseBool(boost::any_cast<std::string>(prop.Get())):boost::any_cast<bool>(prop.Get());}
    }

    virtual Initializer GetTemplate() const
    {
        return (Initializer)ControlRRTSolverInitializer();
    }

    virtual std::vector<Initializer> GetAllTemplates() const
    {
        return GetExoticaOmplControlSolverInitializers();
    }

    virtual void Check(const Initializer& other) const
    {
        if(!other.HasProperty("Name") || !other.properties_.at("Name").IsSet()) ThrowPretty("Initializer ControlRRTSolverInitializer requires property Name to be set!");
        if(!other.HasProperty("StateLimits") || !other.properties_.at("StateLimits").IsSet()) ThrowPretty("Initializer ControlRRTSolverInitializer requires property StateLimits to be set!");
    }

    operator Initializer()
    {
        Initializer ret(GetContainerName());
        ret.properties_.emplace("Name", Property("Name", true, boost::any(Name)));
        ret.properties_.emplace("StateLimits", Property("StateLimits", true, boost::any(StateLimits)));
        ret.properties_.emplace("Debug", Property("Debug", false, boost::any(Debug)));
        ret.properties_.emplace("MaxIterations", Property("MaxIterations", false, boost::any(MaxIterations)));
        ret.properties_.emplace("MaxIterationTime", Property("MaxIterationTime", false, boost::any(MaxIterationTime)));
        ret.properties_.emplace("ConvergenceTolerance", Property("ConvergenceTolerance", false, boost::any(ConvergenceTolerance)));
        ret.properties_.emplace("Seed", Property("Seed", false, boost::any(Seed)));
        ret.properties_.emplace("ApproximateSolution", Property("ApproximateSolution", false, boost::any(ApproximateSolution)));
        return ret;
    }

    std::string Name;
    Eigen::VectorXd StateLimits;
    bool Debug;
    int MaxIterations;
    double MaxIterationTime;
    double ConvergenceTolerance;
    int Seed;
    bool ApproximateSolution;
};

}

#include<exotica_ompl_control_solver/exotica_ompl_control_solver_initializers_numerator.h>


#endif