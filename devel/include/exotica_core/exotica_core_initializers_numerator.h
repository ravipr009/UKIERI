// This file was automatically generated. Do not edit this file!
#ifndef INITIALIZE_PROJECT_HEADER_EXOTICA_CORE_H_$
#define INITIALIZE_PROJECT_HEADER_EXOTICA_CORE_H_$

#include <exotica_core/property.h>
#include <exotica_core/task_map_initializer.h>
#include <exotica_core/object_initializer.h>
#include <exotica_core/frame_initializer.h>
#include <exotica_core/link_initializer.h>
#include <exotica_core/attach_link_initializer.h>
#include <exotica_core/motion_solver_initializer.h>
#include <exotica_core/planning_problem_initializer.h>
#include <exotica_core/scene_initializer.h>
#include <exotica_core/trajectory_initializer.h>
#include <exotica_core/unconstrained_time_indexed_problem_initializer.h>
#include <exotica_core/unconstrained_end_pose_problem_initializer.h>
#include <exotica_core/sampling_problem_initializer.h>
#include <exotica_core/time_indexed_sampling_problem_initializer.h>
#include <exotica_core/task_initializer.h>
#include <exotica_core/time_indexed_problem_initializer.h>
#include <exotica_core/end_pose_problem_initializer.h>
#include <exotica_core/bounded_time_indexed_problem_initializer.h>
#include <exotica_core/bounded_end_pose_problem_initializer.h>
#include <exotica_core/dynamic_time_indexed_shooting_problem_initializer.h>
#include <exotica_core/dynamics_solver_initializer.h>


namespace exotica
{

inline std::vector<Initializer> GetExoticaCoreInitializers()
{
    std::vector<Initializer> ret;
    ret.push_back(TaskMapInitializer().GetTemplate());
    ret.push_back(ObjectInitializer().GetTemplate());
    ret.push_back(FrameInitializer().GetTemplate());
    ret.push_back(LinkInitializer().GetTemplate());
    ret.push_back(AttachLinkInitializer().GetTemplate());
    ret.push_back(MotionSolverInitializer().GetTemplate());
    ret.push_back(PlanningProblemInitializer().GetTemplate());
    ret.push_back(SceneInitializer().GetTemplate());
    ret.push_back(TrajectoryInitializer().GetTemplate());
    ret.push_back(UnconstrainedTimeIndexedProblemInitializer().GetTemplate());
    ret.push_back(UnconstrainedEndPoseProblemInitializer().GetTemplate());
    ret.push_back(SamplingProblemInitializer().GetTemplate());
    ret.push_back(TimeIndexedSamplingProblemInitializer().GetTemplate());
    ret.push_back(TaskInitializer().GetTemplate());
    ret.push_back(TimeIndexedProblemInitializer().GetTemplate());
    ret.push_back(EndPoseProblemInitializer().GetTemplate());
    ret.push_back(BoundedTimeIndexedProblemInitializer().GetTemplate());
    ret.push_back(BoundedEndPoseProblemInitializer().GetTemplate());
    ret.push_back(DynamicTimeIndexedShootingProblemInitializer().GetTemplate());
    ret.push_back(DynamicsSolverInitializer().GetTemplate());
   return ret;
}

}

#endif
