// This file was automatically generated. Do not edit this file!
#ifndef INITIALIZER_EXOTICA_CORE_ATTACH_LINK_INITIALIZER_H
#define INITIALIZER_EXOTICA_CORE_ATTACH_LINK_INITIALIZER_H

#include <exotica_core/property.h>

namespace exotica
{
inline std::vector<Initializer> GetExoticaCoreInitializers();
}

namespace exotica
{

class AttachLinkInitializer : public InitializerBase
{
public:
    static std::string GetContainerName() {return "exotica/AttachLink" ;}

    AttachLinkInitializer() : InitializerBase(),
        Transform( Eigen::IdentityTransform()) ,
        Parent( "") ,
        Local( false) 
    {
    }

    AttachLinkInitializer( std::string _Name, Eigen::VectorXd _Transform =  Eigen::IdentityTransform(), std::string _Parent =  "", bool _Local =  false) : InitializerBase(),
        Name(_Name) ,
        Transform(_Transform) ,
        Parent(_Parent) ,
        Local(_Local) 
    {
    }

    AttachLinkInitializer(const Initializer& other) : AttachLinkInitializer()
    {
        if (other.HasProperty("Name")) {const Property& prop=other.properties_.at("Name"); if(prop.IsSet()) Name = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("Transform")) {const Property& prop=other.properties_.at("Transform"); if(prop.IsSet()) Transform = prop.IsStringType()?ParseVector<double,Eigen::Dynamic>(boost::any_cast<std::string>(prop.Get())):boost::any_cast<Eigen::VectorXd>(prop.Get());}
        if (other.HasProperty("Parent")) {const Property& prop=other.properties_.at("Parent"); if(prop.IsSet()) Parent = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("Local")) {const Property& prop=other.properties_.at("Local"); if(prop.IsSet()) Local = prop.IsStringType()?ParseBool(boost::any_cast<std::string>(prop.Get())):boost::any_cast<bool>(prop.Get());}
    }

    virtual Initializer GetTemplate() const
    {
        return (Initializer)AttachLinkInitializer();
    }

    virtual std::vector<Initializer> GetAllTemplates() const
    {
        return GetExoticaCoreInitializers();
    }

    virtual void Check(const Initializer& other) const
    {
        if(!other.HasProperty("Name") || !other.properties_.at("Name").IsSet()) ThrowPretty("Initializer AttachLinkInitializer requires property Name to be set!");
    }

    operator Initializer()
    {
        Initializer ret(GetContainerName());
        ret.properties_.emplace("Name", Property("Name", true, boost::any(Name)));
        ret.properties_.emplace("Transform", Property("Transform", false, boost::any(Transform)));
        ret.properties_.emplace("Parent", Property("Parent", false, boost::any(Parent)));
        ret.properties_.emplace("Local", Property("Local", false, boost::any(Local)));
        return ret;
    }

    std::string Name;
    Eigen::VectorXd Transform;
    std::string Parent;
    bool Local;
};

}

#include<exotica_core/exotica_core_initializers_numerator.h>


#endif