// This file was automatically generated. Do not edit this file!
#ifndef INITIALIZER_EXOTICA_CORE_TASK_INITIALIZER_H
#define INITIALIZER_EXOTICA_CORE_TASK_INITIALIZER_H

#include <exotica_core/property.h>

namespace exotica
{
inline std::vector<Initializer> GetExoticaCoreInitializers();
}

namespace exotica
{

class TaskInitializer : public InitializerBase
{
public:
    static std::string GetContainerName() {return "exotica/Task" ;}

    TaskInitializer() : InitializerBase(),
        Rho( Eigen::VectorXd()) ,
        Goal( Eigen::VectorXd()) 
    {
    }

    TaskInitializer( std::string _Task, Eigen::VectorXd _Rho =  Eigen::VectorXd(), Eigen::VectorXd _Goal =  Eigen::VectorXd()) : InitializerBase(),
        Task(_Task) ,
        Rho(_Rho) ,
        Goal(_Goal) 
    {
    }

    TaskInitializer(const Initializer& other) : TaskInitializer()
    {
        if (other.HasProperty("Task")) {const Property& prop=other.properties_.at("Task"); if(prop.IsSet()) Task = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("Rho")) {const Property& prop=other.properties_.at("Rho"); if(prop.IsSet()) Rho = prop.IsStringType()?ParseVector<double,Eigen::Dynamic>(boost::any_cast<std::string>(prop.Get())):boost::any_cast<Eigen::VectorXd>(prop.Get());}
        if (other.HasProperty("Goal")) {const Property& prop=other.properties_.at("Goal"); if(prop.IsSet()) Goal = prop.IsStringType()?ParseVector<double,Eigen::Dynamic>(boost::any_cast<std::string>(prop.Get())):boost::any_cast<Eigen::VectorXd>(prop.Get());}
    }

    virtual Initializer GetTemplate() const
    {
        return (Initializer)TaskInitializer();
    }

    virtual std::vector<Initializer> GetAllTemplates() const
    {
        return GetExoticaCoreInitializers();
    }

    virtual void Check(const Initializer& other) const
    {
        if(!other.HasProperty("Task") || !other.properties_.at("Task").IsSet()) ThrowPretty("Initializer TaskInitializer requires property Task to be set!");
    }

    operator Initializer()
    {
        Initializer ret(GetContainerName());
        ret.properties_.emplace("Task", Property("Task", true, boost::any(Task)));
        ret.properties_.emplace("Rho", Property("Rho", false, boost::any(Rho)));
        ret.properties_.emplace("Goal", Property("Goal", false, boost::any(Goal)));
        return ret;
    }

    std::string Task;
    Eigen::VectorXd Rho;
    Eigen::VectorXd Goal;
};

}

#include<exotica_core/exotica_core_initializers_numerator.h>


#endif