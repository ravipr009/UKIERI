// This file was automatically generated. Do not edit this file!
#ifndef INITIALIZER_EXOTICA_CORE_SCENE_INITIALIZER_H
#define INITIALIZER_EXOTICA_CORE_SCENE_INITIALIZER_H

#include <exotica_core/property.h>

namespace exotica
{
inline std::vector<Initializer> GetExoticaCoreInitializers();
}

namespace exotica
{

class SceneInitializer : public InitializerBase
{
public:
    static std::string GetContainerName() {return "exotica/Scene" ;}

    SceneInitializer() : InitializerBase(),
        Debug( false) ,
        RobotDescription( "robot_description") ,
        URDF( "") ,
        SRDF( "") ,
        SetRobotDescriptionRosParams( false) ,
        CollisionScene( "CollisionSceneFCL") ,
        AlwaysUpdateCollisionScene( false) ,
        ReplacePrimitiveShapesWithMeshes( false) ,
        ReplaceCylindersWithCapsules( false) ,
        WorldLinkScale( 1.0) ,
        RobotLinkScale( 1.0) ,
        WorldLinkPadding( 0.0) ,
        RobotLinkPadding( 0.0) ,
        DynamicsSolver( std::vector<exotica::Initializer>()) ,
        LoadScene( "") ,
        Links( std::vector<exotica::Initializer>()) ,
        Trajectories( std::vector<exotica::Initializer>()) ,
        AttachLinks( std::vector<exotica::Initializer>()) ,
        RobotLinksToExcludeFromCollisionScene( std::vector<std::string>()) ,
        WorldLinksToExcludeFromCollisionScene( std::vector<std::string>()) 
    {
    }

    SceneInitializer( std::string _Name, std::string _JointGroup, bool _Debug =  false, std::string _RobotDescription =  "robot_description", std::string _URDF =  "", std::string _SRDF =  "", bool _SetRobotDescriptionRosParams =  false, std::string _CollisionScene =  "CollisionSceneFCL", bool _AlwaysUpdateCollisionScene =  false, bool _ReplacePrimitiveShapesWithMeshes =  false, bool _ReplaceCylindersWithCapsules =  false, double _WorldLinkScale =  1.0, double _RobotLinkScale =  1.0, double _WorldLinkPadding =  0.0, double _RobotLinkPadding =  0.0, std::vector<exotica::Initializer> _DynamicsSolver =  std::vector<exotica::Initializer>(), std::string _LoadScene =  "", std::vector<exotica::Initializer> _Links =  std::vector<exotica::Initializer>(), std::vector<exotica::Initializer> _Trajectories =  std::vector<exotica::Initializer>(), std::vector<exotica::Initializer> _AttachLinks =  std::vector<exotica::Initializer>(), std::vector<std::string> _RobotLinksToExcludeFromCollisionScene =  std::vector<std::string>(), std::vector<std::string> _WorldLinksToExcludeFromCollisionScene =  std::vector<std::string>()) : InitializerBase(),
        Name(_Name) ,
        JointGroup(_JointGroup) ,
        Debug(_Debug) ,
        RobotDescription(_RobotDescription) ,
        URDF(_URDF) ,
        SRDF(_SRDF) ,
        SetRobotDescriptionRosParams(_SetRobotDescriptionRosParams) ,
        CollisionScene(_CollisionScene) ,
        AlwaysUpdateCollisionScene(_AlwaysUpdateCollisionScene) ,
        ReplacePrimitiveShapesWithMeshes(_ReplacePrimitiveShapesWithMeshes) ,
        ReplaceCylindersWithCapsules(_ReplaceCylindersWithCapsules) ,
        WorldLinkScale(_WorldLinkScale) ,
        RobotLinkScale(_RobotLinkScale) ,
        WorldLinkPadding(_WorldLinkPadding) ,
        RobotLinkPadding(_RobotLinkPadding) ,
        DynamicsSolver(_DynamicsSolver) ,
        LoadScene(_LoadScene) ,
        Links(_Links) ,
        Trajectories(_Trajectories) ,
        AttachLinks(_AttachLinks) ,
        RobotLinksToExcludeFromCollisionScene(_RobotLinksToExcludeFromCollisionScene) ,
        WorldLinksToExcludeFromCollisionScene(_WorldLinksToExcludeFromCollisionScene) 
    {
    }

    SceneInitializer(const Initializer& other) : SceneInitializer()
    {
        if (other.HasProperty("Name")) {const Property& prop=other.properties_.at("Name"); if(prop.IsSet()) Name = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("JointGroup")) {const Property& prop=other.properties_.at("JointGroup"); if(prop.IsSet()) JointGroup = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("Debug")) {const Property& prop=other.properties_.at("Debug"); if(prop.IsSet()) Debug = prop.IsStringType()?ParseBool(boost::any_cast<std::string>(prop.Get())):boost::any_cast<bool>(prop.Get());}
        if (other.HasProperty("RobotDescription")) {const Property& prop=other.properties_.at("RobotDescription"); if(prop.IsSet()) RobotDescription = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("URDF")) {const Property& prop=other.properties_.at("URDF"); if(prop.IsSet()) URDF = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("SRDF")) {const Property& prop=other.properties_.at("SRDF"); if(prop.IsSet()) SRDF = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("SetRobotDescriptionRosParams")) {const Property& prop=other.properties_.at("SetRobotDescriptionRosParams"); if(prop.IsSet()) SetRobotDescriptionRosParams = prop.IsStringType()?ParseBool(boost::any_cast<std::string>(prop.Get())):boost::any_cast<bool>(prop.Get());}
        if (other.HasProperty("CollisionScene")) {const Property& prop=other.properties_.at("CollisionScene"); if(prop.IsSet()) CollisionScene = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("AlwaysUpdateCollisionScene")) {const Property& prop=other.properties_.at("AlwaysUpdateCollisionScene"); if(prop.IsSet()) AlwaysUpdateCollisionScene = prop.IsStringType()?ParseBool(boost::any_cast<std::string>(prop.Get())):boost::any_cast<bool>(prop.Get());}
        if (other.HasProperty("ReplacePrimitiveShapesWithMeshes")) {const Property& prop=other.properties_.at("ReplacePrimitiveShapesWithMeshes"); if(prop.IsSet()) ReplacePrimitiveShapesWithMeshes = prop.IsStringType()?ParseBool(boost::any_cast<std::string>(prop.Get())):boost::any_cast<bool>(prop.Get());}
        if (other.HasProperty("ReplaceCylindersWithCapsules")) {const Property& prop=other.properties_.at("ReplaceCylindersWithCapsules"); if(prop.IsSet()) ReplaceCylindersWithCapsules = prop.IsStringType()?ParseBool(boost::any_cast<std::string>(prop.Get())):boost::any_cast<bool>(prop.Get());}
        if (other.HasProperty("WorldLinkScale")) {const Property& prop=other.properties_.at("WorldLinkScale"); if(prop.IsSet()) WorldLinkScale = prop.IsStringType()?ParseDouble(boost::any_cast<std::string>(prop.Get())):boost::any_cast<double>(prop.Get());}
        if (other.HasProperty("RobotLinkScale")) {const Property& prop=other.properties_.at("RobotLinkScale"); if(prop.IsSet()) RobotLinkScale = prop.IsStringType()?ParseDouble(boost::any_cast<std::string>(prop.Get())):boost::any_cast<double>(prop.Get());}
        if (other.HasProperty("WorldLinkPadding")) {const Property& prop=other.properties_.at("WorldLinkPadding"); if(prop.IsSet()) WorldLinkPadding = prop.IsStringType()?ParseDouble(boost::any_cast<std::string>(prop.Get())):boost::any_cast<double>(prop.Get());}
        if (other.HasProperty("RobotLinkPadding")) {const Property& prop=other.properties_.at("RobotLinkPadding"); if(prop.IsSet()) RobotLinkPadding = prop.IsStringType()?ParseDouble(boost::any_cast<std::string>(prop.Get())):boost::any_cast<double>(prop.Get());}
        if (other.HasProperty("DynamicsSolver")) {const Property& prop=other.properties_.at("DynamicsSolver"); if(prop.IsSet()) DynamicsSolver = boost::any_cast<std::vector<exotica::Initializer>>(prop.Get());}
        if (other.HasProperty("LoadScene")) {const Property& prop=other.properties_.at("LoadScene"); if(prop.IsSet()) LoadScene = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("Links")) {const Property& prop=other.properties_.at("Links"); if(prop.IsSet()) Links = boost::any_cast<std::vector<exotica::Initializer>>(prop.Get());}
        if (other.HasProperty("Trajectories")) {const Property& prop=other.properties_.at("Trajectories"); if(prop.IsSet()) Trajectories = boost::any_cast<std::vector<exotica::Initializer>>(prop.Get());}
        if (other.HasProperty("AttachLinks")) {const Property& prop=other.properties_.at("AttachLinks"); if(prop.IsSet()) AttachLinks = boost::any_cast<std::vector<exotica::Initializer>>(prop.Get());}
        if (other.HasProperty("RobotLinksToExcludeFromCollisionScene")) {const Property& prop=other.properties_.at("RobotLinksToExcludeFromCollisionScene"); if(prop.IsSet()) RobotLinksToExcludeFromCollisionScene = prop.IsStringType()?ParseList(boost::any_cast<std::string>(prop.Get())):boost::any_cast<std::vector<std::string>>(prop.Get());}
        if (other.HasProperty("WorldLinksToExcludeFromCollisionScene")) {const Property& prop=other.properties_.at("WorldLinksToExcludeFromCollisionScene"); if(prop.IsSet()) WorldLinksToExcludeFromCollisionScene = prop.IsStringType()?ParseList(boost::any_cast<std::string>(prop.Get())):boost::any_cast<std::vector<std::string>>(prop.Get());}
    }

    virtual Initializer GetTemplate() const
    {
        return (Initializer)SceneInitializer();
    }

    virtual std::vector<Initializer> GetAllTemplates() const
    {
        return GetExoticaCoreInitializers();
    }

    virtual void Check(const Initializer& other) const
    {
        if(!other.HasProperty("Name") || !other.properties_.at("Name").IsSet()) ThrowPretty("Initializer SceneInitializer requires property Name to be set!");
        if(!other.HasProperty("JointGroup") || !other.properties_.at("JointGroup").IsSet()) ThrowPretty("Initializer SceneInitializer requires property JointGroup to be set!");
    }

    operator Initializer()
    {
        Initializer ret(GetContainerName());
        ret.properties_.emplace("Name", Property("Name", true, boost::any(Name)));
        ret.properties_.emplace("JointGroup", Property("JointGroup", true, boost::any(JointGroup)));
        ret.properties_.emplace("Debug", Property("Debug", false, boost::any(Debug)));
        ret.properties_.emplace("RobotDescription", Property("RobotDescription", false, boost::any(RobotDescription)));
        ret.properties_.emplace("URDF", Property("URDF", false, boost::any(URDF)));
        ret.properties_.emplace("SRDF", Property("SRDF", false, boost::any(SRDF)));
        ret.properties_.emplace("SetRobotDescriptionRosParams", Property("SetRobotDescriptionRosParams", false, boost::any(SetRobotDescriptionRosParams)));
        ret.properties_.emplace("CollisionScene", Property("CollisionScene", false, boost::any(CollisionScene)));
        ret.properties_.emplace("AlwaysUpdateCollisionScene", Property("AlwaysUpdateCollisionScene", false, boost::any(AlwaysUpdateCollisionScene)));
        ret.properties_.emplace("ReplacePrimitiveShapesWithMeshes", Property("ReplacePrimitiveShapesWithMeshes", false, boost::any(ReplacePrimitiveShapesWithMeshes)));
        ret.properties_.emplace("ReplaceCylindersWithCapsules", Property("ReplaceCylindersWithCapsules", false, boost::any(ReplaceCylindersWithCapsules)));
        ret.properties_.emplace("WorldLinkScale", Property("WorldLinkScale", false, boost::any(WorldLinkScale)));
        ret.properties_.emplace("RobotLinkScale", Property("RobotLinkScale", false, boost::any(RobotLinkScale)));
        ret.properties_.emplace("WorldLinkPadding", Property("WorldLinkPadding", false, boost::any(WorldLinkPadding)));
        ret.properties_.emplace("RobotLinkPadding", Property("RobotLinkPadding", false, boost::any(RobotLinkPadding)));
        ret.properties_.emplace("DynamicsSolver", Property("DynamicsSolver", false, boost::any(DynamicsSolver)));
        ret.properties_.emplace("LoadScene", Property("LoadScene", false, boost::any(LoadScene)));
        ret.properties_.emplace("Links", Property("Links", false, boost::any(Links)));
        ret.properties_.emplace("Trajectories", Property("Trajectories", false, boost::any(Trajectories)));
        ret.properties_.emplace("AttachLinks", Property("AttachLinks", false, boost::any(AttachLinks)));
        ret.properties_.emplace("RobotLinksToExcludeFromCollisionScene", Property("RobotLinksToExcludeFromCollisionScene", false, boost::any(RobotLinksToExcludeFromCollisionScene)));
        ret.properties_.emplace("WorldLinksToExcludeFromCollisionScene", Property("WorldLinksToExcludeFromCollisionScene", false, boost::any(WorldLinksToExcludeFromCollisionScene)));
        return ret;
    }

    std::string Name;
    std::string JointGroup;
    bool Debug;
    std::string RobotDescription;
    std::string URDF;
    std::string SRDF;
    bool SetRobotDescriptionRosParams;
    std::string CollisionScene;
    bool AlwaysUpdateCollisionScene;
    bool ReplacePrimitiveShapesWithMeshes;
    bool ReplaceCylindersWithCapsules;
    double WorldLinkScale;
    double RobotLinkScale;
    double WorldLinkPadding;
    double RobotLinkPadding;
    std::vector<exotica::Initializer> DynamicsSolver;
    std::string LoadScene;
    std::vector<exotica::Initializer> Links;
    std::vector<exotica::Initializer> Trajectories;
    std::vector<exotica::Initializer> AttachLinks;
    std::vector<std::string> RobotLinksToExcludeFromCollisionScene;
    std::vector<std::string> WorldLinksToExcludeFromCollisionScene;
};

}

#include<exotica_core/exotica_core_initializers_numerator.h>


#endif