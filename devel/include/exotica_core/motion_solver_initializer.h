// This file was automatically generated. Do not edit this file!
#ifndef INITIALIZER_EXOTICA_CORE_MOTION_SOLVER_INITIALIZER_H
#define INITIALIZER_EXOTICA_CORE_MOTION_SOLVER_INITIALIZER_H

#include <exotica_core/property.h>

namespace exotica
{
inline std::vector<Initializer> GetExoticaCoreInitializers();
}

namespace exotica
{

class MotionSolverInitializer : public InitializerBase
{
public:
    static std::string GetContainerName() {return "exotica/MotionSolver" ;}

    MotionSolverInitializer() : InitializerBase(),
        Debug( false) ,
        MaxIterations( 100) 
    {
    }

    MotionSolverInitializer( std::string _Name, bool _Debug =  false, int _MaxIterations =  100) : InitializerBase(),
        Name(_Name) ,
        Debug(_Debug) ,
        MaxIterations(_MaxIterations) 
    {
    }

    MotionSolverInitializer(const Initializer& other) : MotionSolverInitializer()
    {
        if (other.HasProperty("Name")) {const Property& prop=other.properties_.at("Name"); if(prop.IsSet()) Name = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("Debug")) {const Property& prop=other.properties_.at("Debug"); if(prop.IsSet()) Debug = prop.IsStringType()?ParseBool(boost::any_cast<std::string>(prop.Get())):boost::any_cast<bool>(prop.Get());}
        if (other.HasProperty("MaxIterations")) {const Property& prop=other.properties_.at("MaxIterations"); if(prop.IsSet()) MaxIterations = prop.IsStringType()?ParseInt(boost::any_cast<std::string>(prop.Get())):boost::any_cast<int>(prop.Get());}
    }

    virtual Initializer GetTemplate() const
    {
        return (Initializer)MotionSolverInitializer();
    }

    virtual std::vector<Initializer> GetAllTemplates() const
    {
        return GetExoticaCoreInitializers();
    }

    virtual void Check(const Initializer& other) const
    {
        if(!other.HasProperty("Name") || !other.properties_.at("Name").IsSet()) ThrowPretty("Initializer MotionSolverInitializer requires property Name to be set!");
    }

    operator Initializer()
    {
        Initializer ret(GetContainerName());
        ret.properties_.emplace("Name", Property("Name", true, boost::any(Name)));
        ret.properties_.emplace("Debug", Property("Debug", false, boost::any(Debug)));
        ret.properties_.emplace("MaxIterations", Property("MaxIterations", false, boost::any(MaxIterations)));
        return ret;
    }

    std::string Name;
    bool Debug;
    int MaxIterations;
};

}

#include<exotica_core/exotica_core_initializers_numerator.h>


#endif