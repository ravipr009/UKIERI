// This file was automatically generated. Do not edit this file!
#ifndef INITIALIZER_EXOTICA_PENDULUM_DYNAMICS_SOLVER_PENDULUM_DYNAMICS_SOLVER_INITIALIZER_H
#define INITIALIZER_EXOTICA_PENDULUM_DYNAMICS_SOLVER_PENDULUM_DYNAMICS_SOLVER_INITIALIZER_H

#include <exotica_core/property.h>

namespace exotica
{
inline std::vector<Initializer> GetExoticaPendulumDynamicsSolverInitializers();
}

namespace exotica
{

class PendulumDynamicsSolverInitializer : public InitializerBase
{
public:
    static std::string GetContainerName() {return "exotica/PendulumDynamicsSolver" ;}

    PendulumDynamicsSolverInitializer() : InitializerBase(),
        Debug( false) ,
        dt( 0.01) ,
        Integrator( "RK1") ,
        ControlLimitsLow( Eigen::VectorXd()) ,
        ControlLimitsHigh( Eigen::VectorXd()) ,
        FrictionCoefficient( 0.0) 
    {
    }

    PendulumDynamicsSolverInitializer( std::string _Name, bool _Debug =  false, double _dt =  0.01, std::string _Integrator =  "RK1", Eigen::VectorXd _ControlLimitsLow =  Eigen::VectorXd(), Eigen::VectorXd _ControlLimitsHigh =  Eigen::VectorXd(), double _FrictionCoefficient =  0.0) : InitializerBase(),
        Name(_Name) ,
        Debug(_Debug) ,
        dt(_dt) ,
        Integrator(_Integrator) ,
        ControlLimitsLow(_ControlLimitsLow) ,
        ControlLimitsHigh(_ControlLimitsHigh) ,
        FrictionCoefficient(_FrictionCoefficient) 
    {
    }

    PendulumDynamicsSolverInitializer(const Initializer& other) : PendulumDynamicsSolverInitializer()
    {
        if (other.HasProperty("Name")) {const Property& prop=other.properties_.at("Name"); if(prop.IsSet()) Name = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("Debug")) {const Property& prop=other.properties_.at("Debug"); if(prop.IsSet()) Debug = prop.IsStringType()?ParseBool(boost::any_cast<std::string>(prop.Get())):boost::any_cast<bool>(prop.Get());}
        if (other.HasProperty("dt")) {const Property& prop=other.properties_.at("dt"); if(prop.IsSet()) dt = prop.IsStringType()?ParseDouble(boost::any_cast<std::string>(prop.Get())):boost::any_cast<double>(prop.Get());}
        if (other.HasProperty("Integrator")) {const Property& prop=other.properties_.at("Integrator"); if(prop.IsSet()) Integrator = boost::any_cast<std::string>(prop.Get());}
        if (other.HasProperty("ControlLimitsLow")) {const Property& prop=other.properties_.at("ControlLimitsLow"); if(prop.IsSet()) ControlLimitsLow = prop.IsStringType()?ParseVector<double,Eigen::Dynamic>(boost::any_cast<std::string>(prop.Get())):boost::any_cast<Eigen::VectorXd>(prop.Get());}
        if (other.HasProperty("ControlLimitsHigh")) {const Property& prop=other.properties_.at("ControlLimitsHigh"); if(prop.IsSet()) ControlLimitsHigh = prop.IsStringType()?ParseVector<double,Eigen::Dynamic>(boost::any_cast<std::string>(prop.Get())):boost::any_cast<Eigen::VectorXd>(prop.Get());}
        if (other.HasProperty("FrictionCoefficient")) {const Property& prop=other.properties_.at("FrictionCoefficient"); if(prop.IsSet()) FrictionCoefficient = prop.IsStringType()?ParseDouble(boost::any_cast<std::string>(prop.Get())):boost::any_cast<double>(prop.Get());}
    }

    virtual Initializer GetTemplate() const
    {
        return (Initializer)PendulumDynamicsSolverInitializer();
    }

    virtual std::vector<Initializer> GetAllTemplates() const
    {
        return GetExoticaPendulumDynamicsSolverInitializers();
    }

    virtual void Check(const Initializer& other) const
    {
        if(!other.HasProperty("Name") || !other.properties_.at("Name").IsSet()) ThrowPretty("Initializer PendulumDynamicsSolverInitializer requires property Name to be set!");
    }

    operator Initializer()
    {
        Initializer ret(GetContainerName());
        ret.properties_.emplace("Name", Property("Name", true, boost::any(Name)));
        ret.properties_.emplace("Debug", Property("Debug", false, boost::any(Debug)));
        ret.properties_.emplace("dt", Property("dt", false, boost::any(dt)));
        ret.properties_.emplace("Integrator", Property("Integrator", false, boost::any(Integrator)));
        ret.properties_.emplace("ControlLimitsLow", Property("ControlLimitsLow", false, boost::any(ControlLimitsLow)));
        ret.properties_.emplace("ControlLimitsHigh", Property("ControlLimitsHigh", false, boost::any(ControlLimitsHigh)));
        ret.properties_.emplace("FrictionCoefficient", Property("FrictionCoefficient", false, boost::any(FrictionCoefficient)));
        return ret;
    }

    std::string Name;
    bool Debug;
    double dt;
    std::string Integrator;
    Eigen::VectorXd ControlLimitsLow;
    Eigen::VectorXd ControlLimitsHigh;
    double FrictionCoefficient;
};

}

#include<exotica_pendulum_dynamics_solver/exotica_pendulum_dynamics_solver_initializers_numerator.h>


#endif